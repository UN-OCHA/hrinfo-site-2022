<?php

/**
 * @file
 * Themes and preprocessors for the paragraphs page title module.
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;

/**
 * Change content type to page.
 */
function hr_paragraphs_update_9001() {
  $query = \Drupal::entityQuery('node')->condition('type', 'article');
  $results = $query->execute();

  foreach ($results as $nid) {
    $node = Node::load($nid);
    if ($nid == 1) {
      $node->set('type', 'page');
      $node->setNewRevision();
      $node->save();
    }
    else {
      $node->delete();
    }
  }
}

/**
 * Change content type to page.
 */
function hr_paragraphs_update_9002() {
  $query = \Drupal::entityQuery('node')->condition('nid', 1);
  $results = $query->execute();

  foreach ($results as $nid) {
    $node = Node::load($nid);
    $node->set('type', 'landing_page');
    $node->setNewRevision();
    $node->save();
  }
}

/**
 * Add user with uid 999999.
 */
function hr_paragraphs_update_9003() {
  /** @var \Drupal\user\Entity\User $user */
  $user = \Drupal::entityTypeManager()->getStorage('user')->create([
    'uid' => 999999,
    'name' => 'D7 offset - Do not delete',
    'mail' => 'no@example.com',
  ]);

  $user->block()->save();
}

/**
 * Change IFrame URL to 4096 characters.
 */
function hr_paragraphs_update_9004() {
  // Alter database.
  $database = \Drupal::database();
  $database->query('ALTER TABLE paragraph__field_iframe_url MODIFY field_iframe_url_uri VARCHAR(4096)');
  $database->query('ALTER TABLE paragraph_revision__field_iframe_url MODIFY field_iframe_url_uri VARCHAR(4096)');

  // Update storage.
  $key = 'paragraph.field_schema_data.field_iframe_url';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($key);
  $field_schema['paragraph__field_iframe_url']['fields']['field_iframe_url_uri']['length'] = 4096;
  $field_schema['paragraph_revision__field_iframe_url']['fields']['field_iframe_url_uri']['length'] = 4096;
  $storage_schema->set($key, $field_schema);
}

/**
 * Change IFrame URL to new field type.
 */
function hr_paragraphs_update_9005() {
  $field_storage = Drupal::entityTypeManager()->getStorage('field_storage_config')->load('paragraph.field_iframe_url');
  $new_field_storage = $field_storage->toArray();
  $new_field_storage['type'] = 'long_link';
  $new_field_storage['module'] = 'hr_paragraphs';

  $new_field_storage = FieldStorageConfig::create($new_field_storage);
  $new_field_storage->original = $new_field_storage;
  $new_field_storage->enforceIsNew(FALSE);

  $new_field_storage->save();
}

/**
 * Delete wrong aliases.
 */
function hr_paragraphs_update_9006() {
  /** @var \Drupal\path_alias\Entity\PathAlias[] $aliases */
  $aliases = Drupal::entityTypeManager()->getStorage('path_alias')->loadMultiple();
  foreach ($aliases as $alias) {
    if ($alias->getAlias() === $alias->getPath()) {
      $alias->delete();
    }
    elseif (strpos($alias->getPath(), '/group/') === 0) {
      $parts = explode('/', $alias->getPath());
      $group = Drupal::entityTypeManager()->getStorage('group')->load($parts[2]);
      if (!$group) {
        $alias->delete();
      }
    }
  }
}

/**
 * Add computed fields to groups.
 */
function hr_paragraphs_update_9007() {
  $storage_definitions = hr_paragraphs_custom_group_fields();

  foreach ($storage_definitions as $field_name => $storage_definition) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($field_name, 'group', 'group', $storage_definition);
  }
}

/**
 * Update groups for enabled tabs and used paragraphs.
 */
function hr_paragraphs_update_9008(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $ids = \Drupal::entityQuery('group')->execute();
    $sandbox['total'] = count($ids);
    $sandbox['current'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $ids = \Drupal::entityQuery('group')
    ->range($sandbox['current'], 25)
    ->sort('id')
    ->execute();

  if (empty($sandbox['total'])) {
    $sandbox['#finished'] = 1;
    return;
  }

  /** @var \Drupal\group\Entity\Group $groups[] */
  $groups = \Drupal::entityTypeManager()->getStorage('group')->loadMultiple($ids);
  foreach ($groups as $group) {
    $group->isMigrating = TRUE;
    $group->save();
    $sandbox['current']++;
  }

  \Drupal::messenger()->addMessage($sandbox['current'] . ' groups processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Add computed fields to users.
 */
function hr_paragraphs_update_9009() {
  $storage_definitions = hr_paragraphs_custom_user_fields();

  foreach ($storage_definitions as $field_name => $storage_definition) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($field_name, 'user', 'user', $storage_definition);
  }
}

/**
 * Update users for manager groups.
 */
function hr_paragraphs_update_9010(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $ids = \Drupal::entityQuery('user')->execute();
    $sandbox['total'] = count($ids);
    $sandbox['current'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $ids = \Drupal::entityQuery('user')
    ->range($sandbox['current'], 25)
    ->sort('uid')
    ->execute();

  if (empty($sandbox['total'])) {
    $sandbox['#finished'] = 1;
    return;
  }

  /** @var \Drupal\user\Entity\User $users */
  $users = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple($ids);
  foreach ($users as $user) {
    if ($user->manager_for->isEmpty()) {
      $user->isMigrating = TRUE;
      $user->save();
    }
    $sandbox['current']++;
  }

  \Drupal::messenger()->addMessage($sandbox['current'] . ' users processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Add computed fields to nodes.
 */
function hr_paragraphs_update_9011() {
  $storage_definitions = hr_paragraphs_custom_node_fields();

  foreach ($storage_definitions as $field_name => $storage_definition) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($field_name, 'node', 'node', $storage_definition);
  }
}

/**
 * Update nodes for used paragraph types.
 */
function hr_paragraphs_update_9012(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $ids = \Drupal::entityQuery('node')->execute();
    $sandbox['total'] = count($ids);
    $sandbox['current'] = 0;

    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }

  $ids = \Drupal::entityQuery('node')
    ->range($sandbox['current'], 25)
    ->sort('nid')
    ->execute();

  if (empty($sandbox['total'])) {
    $sandbox['#finished'] = 1;
    return;
  }

  /** @var \Drupal\node\Entity\Node $nodes */
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($ids);
  foreach ($nodes as $node) {
    $node->isMigrating = TRUE;
    $node->save();

    $sandbox['current']++;
  }

  \Drupal::messenger()->addMessage($sandbox['current'] . ' nodes processed.');

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Hide fields on display.
 */
function hr_paragraphs_update_9013() {
  hr_paragraphs_update_9007();
  hr_paragraphs_update_9011();
}

/**
 * Delete GSCE paragraphs.
 */
function hr_paragraphs_update_9015() {
  /** @var \Drupal\paragraphs\Entity\Paragraph[] $paragraphs */
  $paragraphs = \Drupal::entityTypeManager()->getStorage('paragraph')->loadByProperties([
    'type' => 'search_results',
  ]);

  if (!empty($paragraphs)) {
    foreach ($paragraphs as $paragraph) {
      $paragraph->delete();
    }
  }
}
