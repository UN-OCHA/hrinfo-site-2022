<?php

/**
 * @file
 * Themes and preprocessors for the paragraphs page title module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\path_alias\Entity\PathAlias;
use Drupal\subgroup\MalformedLeafException;

/**
 * Implements hook_theme().
 */
function hr_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'hr_paragraphs_assessments_map' => [
      'template' => 'ocha-map',
      'variables' => [
        'base_url' => 'http://hrinfo-site.docksal/',
        'src' => 'http://hrinfo-site.docksal/rest/assessments/map-data?items_per_page=800',
        'component_url' => '/modules/custom/hr_paragraphs/component/build/',
      ],
    ],
    'hr_paragraphs_assessments_table' => [
      'template' => 'ocha-table',
      'variables' => [
        'base_url' => 'http://hrinfo-site.docksal/',
        'src' => 'http://hrinfo-site.docksal/rest/assessments/table-data?items_per_page=800',
        'component_url' => '/modules/custom/hr_paragraphs/component/build/',
      ],
    ],
    'hr_paragraphs_assessments_list' => [
      'template' => 'ocha-list',
      'variables' => [
        'base_url' => 'http://hrinfo-site.docksal/',
        'src' => 'http://hrinfo-site.docksal/rest/assessments/list-data?items_per_page=800',
        'component_url' => '/modules/custom/hr_paragraphs/component/build/',
      ],
    ],
    'hdx_dataset' => [
      'template' => 'hdx-dataset',
      'variables' => [
        'data' => [],
        'pager' => NULL,
      ],
    ],
    'rw_river' => [
      'template' => 'rw-river',
      'variables' => [
        'data' => [],
        'total' => [],
        'facets' => [],
        'active_facets' => [],
        'pager' => NULL,
      ],
    ],
    'upcoming_events' => [
      'template' => 'upcoming-events',
      'variables' => [
        'events' => [],
        'read_more' => NULL,
      ],
    ],
    'hr_paragraphs_rss_feed' => [
      'template' => 'hr-paragraphs-rss-feed',
      'variables' => [
        'items' => [],
        'options' => [],
        'read_more' => NULL,
      ],
    ],
    'group_children' => [
      'template' => 'group-children',
      'variables' => [
        'children' => [],
      ],
    ],
    'group_nodes' => [
      'template' => 'group-nodes',
      'variables' => [
        'nodes' => [],
      ],
    ],
    'fullcalendar_link' => [
      'template' => 'fullcalendar-link',
      'variables' => [
        'calendar_url' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hr_paragraphs_group_insert(EntityInterface $entity) {
  $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  $source = '/group/' . $entity->id();

  $path_alias_manager = \Drupal::service('path_alias.manager');
  $group_alias = $path_alias_manager->getAliasByPath($source);

  // Skip if an alias is already set.
  if ($group_alias !== $source) {
    return;
  }

  $page_title = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->label());
  $new_alias = '/operations/' . $page_title;

  if ($entity->subgroup_tree->value && $entity->subgroup_tree->value !== $entity->id()) {
    $parent_group = Group::load($entity->subgroup_tree->value);
    $group_alias = $path_alias_manager->getAliasByPath('/group/' . $parent_group->id());
    $new_alias = $group_alias . '/' . $page_title;
  }

  /** @var \Drupal\pathauto\AliasUniquifier $alias_uniquifier */
  $alias_uniquifier = \Drupal::service('pathauto.alias_uniquifier');
  $alias_uniquifier->uniquify($new_alias, $source, $langcode);

  $path_alias = PathAlias::create([
    'path' => $source,
    'alias' => $new_alias,
  ]);
  $path_alias->save();

  // Add aliases for tabs.
  $tabs = [
    'events',
    'offices',
    'pages',
    'reports',
    'infographics',
    'datasets',
    'assessments',
  ];

  foreach ($tabs as $tab) {
    $source = '/group/' . $entity->id() . '/' . $tab;
    $tab_alias = $new_alias . '/' . $tab;

    $existing_alias = $path_alias_manager->getAliasByPath($source);

    // Skip if an alias is already set.
    if ($existing_alias !== $source) {
      continue;
    }

    $path_alias = PathAlias::create([
      'path' => $source,
      'alias' => $tab_alias,
    ]);
    $path_alias->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function hr_paragraphs_group_update(EntityInterface $entity) {
  return hr_paragraphs_group_insert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hr_paragraphs_node_insert(EntityInterface $entity) {
  $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  $source = '/node/' . $entity->id();

  $path_alias_manager = \Drupal::service('path_alias.manager');
  $node_alias = $path_alias_manager->getAliasByPath($source);

  // Skip if an alias is already set.
  if ($node_alias !== $source) {
    return;
  }

  $page_title = \Drupal::service('pathauto.alias_cleaner')->cleanString($entity->label());

  $group_content_array = GroupContent::loadByEntity($entity);
  $group_content = reset($group_content_array);
  if ($group_content) {
    $group = $group_content->getGroup();
    $group_alias = $path_alias_manager->getAliasByPath('/group/' . $group->id());
    $new_alias = $group_alias . '/' . $page_title;

    /** @var \Drupal\pathauto\AliasUniquifier $alias_uniquifier */
    $alias_uniquifier = \Drupal::service('pathauto.alias_uniquifier');
    $alias_uniquifier->uniquify($new_alias, $source, $langcode);

    $path_alias = PathAlias::create([
      'path' => $source,
      'alias' => $new_alias,
    ]);

    $path_alias->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function hr_paragraphs_node_update(EntityInterface $entity) {
  return hr_paragraphs_node_insert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function hr_paragraphs_group_content_insert(EntityInterface $entity) {
  /** @var \Drupal\group\Entity\GroupContent $entity */
  $plugin_id = $entity->getGroupContentType()->getContentPluginId();
  if ($plugin_id != 'group_node:article') {
    return;
  }

  $node = $entity->getEntity();
  $group = $entity->getGroup();

  $langcode = LanguageInterface::LANGCODE_NOT_SPECIFIED;
  $source = '/node/' . $node->id();

  $path_alias_manager = \Drupal::service('path_alias.manager');
  $node_alias = $path_alias_manager->getAliasByPath($source);

  // Skip if an alias is already set.
  if ($node_alias !== $source) {
    return;
  }

  $page_title = \Drupal::service('pathauto.alias_cleaner')->cleanString($node->label());

  $group_alias = $path_alias_manager->getAliasByPath('/group/' . $group->id());
  $new_alias = $group_alias . '/' . $page_title;

  /** @var \Drupal\pathauto\AliasUniquifier $alias_uniquifier */
  $alias_uniquifier = \Drupal::service('pathauto.alias_uniquifier');
  $alias_uniquifier->uniquify($new_alias, $source, $langcode);

  $path_alias = PathAlias::create([
    'path' => $source,
    'alias' => $new_alias,
  ]);

  $path_alias->save();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function hr_paragraphs_group_content_update(EntityInterface $entity) {
  return hr_paragraphs_group_content_insert($entity);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__offices(&$variables) {
  $operation_uuid = FALSE;

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_operation->isEmpty()) {
    $operation_uuid = $paragraph->field_operation->entity->uuid();
  }
  else {
    $operation_uuid = $paragraph->getParentEntity()->field_operation->entity->uuid();
  }

  if (!$operation_uuid) {
    return;
  }

  $entity_id = 'office';
  $view_mode = 'teaser';

  $entity_type_manager = \Drupal::entityTypeManager();
  $assessment_uuids = $entity_type_manager->getStorage($entity_id)->getQuery()->condition('operations', $operation_uuid)->execute();
  $offices = $entity_type_manager->getStorage($entity_id)->loadMultiple($assessment_uuids);

  $view_builder = $entity_type_manager->getViewBuilder($entity_id);
  $variables['content']['offices'] = $view_builder->viewMultiple($offices, $view_mode);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__recent_assessments(&$variables) {
  $operation_uuid = FALSE;

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_operation->isEmpty()) {
    $operation_uuid = $paragraph->field_operation->entity->uuid();
  }
  else {
    $operation_uuid = $paragraph->getParentEntity()->field_operation->entity->uuid();
  }

  if (!$operation_uuid) {
    return;
  }

  $entity_id = 'assessment';
  $view_mode = 'teaser';

  $entity_type_manager = \Drupal::entityTypeManager();
  $assessment_uuids = $entity_type_manager->getStorage($entity_id)->getQuery()
    ->condition('operations', $operation_uuid)
    ->range(0, 10)
    ->sort('changed', 'DESC')
    ->execute();
  $assessments = $entity_type_manager->getStorage($entity_id)->loadMultiple($assessment_uuids);

  $view_builder = $entity_type_manager->getViewBuilder($entity_id);
  $variables['content']['assessments'] = $view_builder->viewMultiple($assessments, $view_mode);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__iframe(&$variables) {
  $embed_code = '';

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_iframe_url->isEmpty()) {
    $embed_code .= '<iframe sandbox="allow-scripts allow-same-origin" allow="autoplay; encrypted-media;" width="100%" height="500" referrerpolicy="no-referrer" frameborder="0" src="' . $paragraph->get('field_iframe_url')->first()->uri . '"></iframe>';
  }
  elseif (!$paragraph->field_embed_code->isEmpty()) {
    $embed_code .= $paragraph->field_embed_code->value;
  }

  if (empty($embed_code)) {
    return;
  }

  $variables['content']['embed'] = [
    '#type' => 'inline_template',
    '#template' => $embed_code,
    '#weight' => 99,
  ];
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__rss_feed(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->field_rss_link->isEmpty()) {
    return;
  }

  $rss_options = $paragraph->field_rss_options->getValue();
  foreach ($rss_options as &$rss_option) {
    $rss_option = $rss_option['value'];
  }

  $max_number_of_items = $paragraph->field_max_number_of_items->value ?? 10;
  $options = [
    'display_date' => FALSE,
    'display_description' => FALSE,
    'display_each_item_full' => FALSE,
    'display_read_more' => FALSE,
  ];

  $content = file_get_contents($paragraph->field_rss_link->first()->uri);
  $xml = new SimpleXmlElement($content);

  $items = [];
  foreach ($xml->channel->item as $entry) {
    $items[] = [
      'title' => $entry->title,
      'link' => $entry->link,
      'description' => $entry->description,
      'date' => strtotime($entry->pubDate),
    ];
  }

  if (empty($items)) {
    return;
  }

  if (in_array('display_date', $rss_options)) {
    $options['display_date'] = TRUE;
  }
  if (in_array('display_description', $rss_options)) {
    $options['display_description'] = TRUE;
  }
  if (in_array('display_each_item_full', $rss_options)) {
    $options['display_each_item_full'] = TRUE;
  }

  // Slice array.
  $items = array_slice($items, 0, $max_number_of_items);

  // Add 'read more' if needed.
  if (in_array('display_read_more', $rss_options)) {
    $read_more_label = '';
    $read_more_url = '';

    if ($paragraph->field_rss_read_more->isEmpty()) {
      if (!empty($xml->channel->link[0])) {
        $read_more_label = t('View original RSS feed');
        $read_more_url = $xml->channel->link[0];
        $options['display_read_more'] = TRUE;
      }
    }
    else {
      $read_more_label = t('View content related to this feed');
      $read_more_url = $paragraph->field_rss_read_more->first()->uri;
      $options['display_read_more'] = TRUE;
    }
  }

  $variables['content']['embed'] = [
    '#theme' => 'hr_paragraphs_rss_feed',
    '#items' => $items,
    '#options' => $options,
    '#read_more' => [
      'title' => $read_more_label,
      'url' => $read_more_url,
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__upcoming_events(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $group = $paragraph->getParentEntity();

  if (!$group) {
    return;
  }

  if ($group->field_ical_url->isEmpty()) {
    return;
  }

  /** @var \Drupal\hr_paragraphs\Controller\IcalController $ical_controller */
  $ical_controller = \Drupal::service('hr_paragraphs.ical_controller');
  $start = date('Y-m-d');
  $end = date('Y-m-d', time() + 30 * 24 * 60 * 60);
  $events = $ical_controller->getIcalEvents($group, $start, $end);

  $variables['content']['upcoming'] = [
    '#theme' => 'upcoming_events',
    '#events' => $events,
    '#read_more' => [
      'title' => 'More events',
      'url' => Url::fromRoute('hr_paragraphs.operation.events', [
        'group' => $group->id(),
      ]),
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__child_groups(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  /** @var \Drupal\group\Entity\Group */
  $group = $paragraph->getParentEntity();

  // For preview mode.
  if (!$group) {
    return;
  }

  // If we are on page, get the group.
  if (get_class($group) == 'Drupal\node\Entity\Node') {
    $group_content_array = GroupContent::loadByEntity($group);
    $group_content = reset($group_content_array);
    $group = $group_content->getGroup();
  }

  if (!$group) {
    return;
  }

  try {
    /** @var \Drupal\subgroup\Entity\SubgroupHandlerInterface $subgroup_handler */
    $subgroup_handler = \Drupal::entityTypeManager()->getHandler($group->getEntityTypeId(), 'subgroup');
    if (!$subgroup_handler->hasDescendants($group)) {
      return;
    }
    $children = $subgroup_handler->getDescendants($group);

    if (empty($children)) {
      return;
    }

    $items = [];
    foreach ($children as $child) {
      $items[] = [
        'label' => $child->label->value,
        'link' => $child->toUrl(),
      ];
    }

    $variables['content']['children'] = [
      '#theme' => 'group_children',
      '#children' => $items,
    ];
  }
  catch (MalformedLeafException $exception) {
    return;
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__group_pages(&$variables) {
  $exclude_pages = [];

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  /** @var \Drupal\group\Entity\Group */
  $group = $paragraph->getParentEntity();

  // For preview mode.
  if (!$group) {
    return;
  }

  // If we are on page, get the group.
  if (get_class($group) == 'Drupal\node\Entity\Node') {
    $exclude_pages[] = $group->id();
    $group_content_array = GroupContent::loadByEntity($group);
    $group_content = reset($group_content_array);
    $group = $group_content->getGroup();
  }

  if (!$group) {
    return;
  }

  // Exclude special pages.
  if ($group->hasField('field_offices_page') && !$group->field_offices_page->isEmpty()) {
    /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link */
    $link = $group->field_offices_page->first();

    if (!$link->isExternal()) {
      $params = $link->getUrl()->getRouteParameters();
      $exclude_pages[] = $params['node'];
    }
  }

  if ($group->hasField('field_pages_page') && !$group->field_pages_page->isEmpty()) {
    /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link */
    $link = $group->field_pages_page->first();

    if (!$link->isExternal()) {
      $params = $link->getUrl()->getRouteParameters();
      $exclude_pages[] = $params['node'];
    }
  }

  $nodes = $group->getContentEntities('group_node:article');
  if (empty($nodes)) {
    return;
  }

  $items = [];
  foreach ($nodes as $node) {
    // Skip current page.
    if (in_array($node->id(), $exclude_pages)) {
      continue;
    }

    $items[] = [
      'label' => $node->title->value,
      'link' => $node->toUrl(),
    ];
  }

  $variables['content']['nodes'] = [
    '#theme' => 'group_nodes',
    '#nodes' => $items,
  ];
}

/**
 * Implements hook_library_info_alter().
 */
function hr_paragraphs_library_info_alter(&$libraries, $extension) {
  if ($extension !== 'fullcalendar_api') {
    return;
  }

  $new_file = '/' . drupal_get_path('module', 'hr_paragraphs') . '/component/events/js/fullcalendar.js';
  $replacements = [
    'js/fullcalendar.load.js' => $new_file,
  ];

  $new_js = [];
  foreach ($libraries['fullcalendar_load']['js'] as $source => $options) {
    if (isset($replacements[$source])) {
      $new_js[$replacements[$source]] = $options;
    }
    else {
      $new_js[$source] = $options;
    }
  }
  $libraries['fullcalendar_load']['js'] = $new_js;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function hr_paragraphs_menu_local_tasks_alter(&$data, $route_name) {
  if (isset($data['tabs'][0]['group.view']['#access'])) {
    $data['tabs'][0]['group.view']['#access'] = FALSE;
  }
}
