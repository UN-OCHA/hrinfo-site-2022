<?php

/**
 * @file
 * Themes and preprocessors for the paragraphs page title module.
 */

/**
 * Implements hook_theme().
 */
function hr_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'hr_paragraphs_assessments_map' => [
      'template' => 'ocha-map',
      'variables' => [
        'base_url' => 'http://hrinfo-site.docksal/',
        'src' => 'http://hrinfo-site.docksal/rest/assessments/map-data?items_per_page=800',
        'component_url' => '/modules/custom/hr_paragraphs/component/build/',
      ],
    ],
    'hr_paragraphs_assessments_table' => [
      'template' => 'ocha-table',
      'variables' => [
        'base_url' => 'http://hrinfo-site.docksal/',
        'src' => 'http://hrinfo-site.docksal/rest/assessments/table-data?items_per_page=800',
        'component_url' => '/modules/custom/hr_paragraphs/component/build/',
      ],
    ],
    'hr_paragraphs_assessments_list' => [
      'template' => 'ocha-list',
      'variables' => [
        'base_url' => 'http://hrinfo-site.docksal/',
        'src' => 'http://hrinfo-site.docksal/rest/assessments/list-data?items_per_page=800',
        'component_url' => '/modules/custom/hr_paragraphs/component/build/',
      ],
    ],
    'hdx_dataset' => [
      'template' => 'hdx-dataset',
      'variables' => [
        'data' => [],
        'pager' => NULL,
      ],
    ],
    'rw_river' => [
      'template' => 'rw-river',
      'variables' => [
        'data' => [],
        'total' => [],
        'facets' => [],
        'active_facets' => [],
        'pager' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__offices(&$variables) {
  $operation_uuid = FALSE;

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_operation->isEmpty()) {
    $operation_uuid = $paragraph->field_operation->entity->uuid();
  }
  else {
    $operation_uuid = $paragraph->getParentEntity()->field_operation->entity->uuid();
  }

  if (!$operation_uuid) {
    return;
  }

  $entity_id = 'office';
  $view_mode = 'teaser';

  $entity_type_manager = \Drupal::entityTypeManager();
  $assessment_uuids = $entity_type_manager->getStorage($entity_id)->getQuery()->condition('operations', $operation_uuid)->execute();
  $offices = $entity_type_manager->getStorage($entity_id)->loadMultiple($assessment_uuids);

  $view_builder = $entity_type_manager->getViewBuilder($entity_id);
  $variables['content']['offices'] = $view_builder->viewMultiple($offices, $view_mode);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__recent_assessments(&$variables) {
  $operation_uuid = FALSE;

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_operation->isEmpty()) {
    $operation_uuid = $paragraph->field_operation->entity->uuid();
  }
  else {
    $operation_uuid = $paragraph->getParentEntity()->field_operation->entity->uuid();
  }

  if (!$operation_uuid) {
    return;
  }

  $entity_id = 'assessment';
  $view_mode = 'teaser';

  $entity_type_manager = \Drupal::entityTypeManager();
  $assessment_uuids = $entity_type_manager->getStorage($entity_id)->getQuery()
    ->condition('operations', $operation_uuid)
    ->range(0, 10)
    ->sort('changed', 'DESC')
    ->execute();
  $assessments = $entity_type_manager->getStorage($entity_id)->loadMultiple($assessment_uuids);

  $view_builder = $entity_type_manager->getViewBuilder($entity_id);
  $variables['content']['assessments'] = $view_builder->viewMultiple($assessments, $view_mode);
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__iframe(&$variables) {
  $embed_code = '';

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!$paragraph->field_iframe_url->isEmpty()) {
    $embed_code .= '<iframe sandbox="allow-scripts allow-same-origin" allow="autoplay; encrypted-media;" width="100%" height="500" referrerpolicy="no-referrer" frameborder="0" src="' . $paragraph->get('field_iframe_url')->first()->uri . '"></iframe>';
  }
  elseif (!$paragraph->field_embed_code->isEmpty()) {
    $embed_code .= $paragraph->field_embed_code->value;
  }

  if (empty($embed_code)) {
    return;
  }

  $variables['content']['embed'] = [
    '#type' => 'inline_template',
    '#template' => $embed_code,
    '#weight' => 99,
  ];
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hr_paragraphs_preprocess_paragraph__rss_feed(&$variables) {
  $output = '';

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->field_rss_link->isEmpty()) {
    return;
  }

  $rss_options = $paragraph->field_rss_options->getValue();
  foreach ($rss_options as &$rss_option) {
    $rss_option = $rss_option['value'];
  }

  $max_number_of_items = $paragraph->field_max_number_of_items->value ?? 10;

  $content = file_get_contents($paragraph->field_rss_link->first()->uri);
  $xml = new SimpleXmlElement($content);

  $items = [];
  foreach ($xml->channel->item as $entry) {
    $items[] = [
      'title' => $entry->title,
      'link' => $entry->link,
      'description' => $entry->description,
      'date' => strtotime($entry->pubDate),
    ];
  }

  if (empty($items)) {
    return;
  }

  // Slice array.
  $items = array_slice($items, 0, $max_number_of_items);

  $output .= '<div class="external-feed--wrapper">';
  $output .= '<ul class="external-feed--list">';
  foreach ($items as $item) {
    $output .= '<li class="external-feed--item">';
    $output .= '<div class="external-feed--item-title"><a rel="noopener noreferrer external nofollow" class="external-feed--item-link" href="' . $item['link'] . '">' . $item['title'] . '</a></div>';
    if (in_array('display_date', $rss_options)) {
      $output .= '<div class="external-feed--item-date">' . date('d-M-Y', $item['date']) . '</div>';
    }
    if (in_array('display_description', $rss_options)) {
      $output .= '<div class="external-feed--item-description">' . $item['description'] . '</div>';
    }
    $output .= '</li>';
  }
  $output .= '</ul>';

  // Add read more if needed.
  if (in_array('display_read_more', $rss_options)) {
    $output .= '<div class="external-feed--readmore">';
    if ($paragraph->field_rss_read_more->isEmpty()) {
      if (!empty($xml->channel->link[0])) {
        $output .= '<a rel="noopener noreferrer external nofollow" href="' . $xml->channel->link[0] . '">' . t('Read more') . '</a>';
      }
    }
    else {
      $output .= '<a rel="noopener noreferrer external nofollow" href="' . $paragraph->field_rss_read_more->first()->uri . '">' . $paragraph->field_rss_read_more->first()->title . '</a>';
    }
    $output .= '</div>';
  }
  $output .= '</div>';

  $variables['content']['embed'] = [
    '#type' => 'inline_template',
    '#template' => $output,
    '#weight' => 99,
  ];
}

/**
 * Implements hook_library_info_alter().
 */
function hr_paragraphs_library_info_alter(&$libraries, $extension) {
  if ($extension !== 'fullcalendar_api') {
    return;
  }

  $new_file = '/' . drupal_get_path('module', 'hr_paragraphs') . '/component/events/js/fullcalendar.js';
  $replacements = [
    'js/fullcalendar.load.js' => $new_file,
  ];

  $new_js = [];
  foreach ($libraries['fullcalendar_load']['js'] as $source => $options) {
    if (isset($replacements[$source])) {
      $new_js[$replacements[$source]] = $options;
    }
    else {
      $new_js[$source] = $options;
    }
  }
  $libraries['fullcalendar_load']['js'] = $new_js;
}
