diff --git a/core/modules/content_translation/content_translation.module b/core/modules/content_translation/content_translation.module
index eba279690f0663d6dd9e7cab55b9e31532c4e364..bbb79f7933424dfc147bed1bfa61396c0e8f3dd9 100644
--- a/core/modules/content_translation/content_translation.module
+++ b/core/modules/content_translation/content_translation.module
@@ -17,6 +17,7 @@
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\language\ContentLanguageSettingsInterface;
 
@@ -372,14 +373,77 @@ function content_translation_menu_links_discovered_alter(array &$links) {
  *   The access result.
  */
 function content_translation_translate_access(EntityInterface $entity) {
+  $entity_can_be_viewed = $entity instanceof ContentEntityInterface && $entity->access('view');
+  $entity_is_translatable = !$entity->getUntranslated()->language()->isLocked() && \Drupal::languageManager()->isMultilingual() && $entity->isTranslatable();
+
+  // @todo Remove when this module's access layer receives a proper overhaul
+  //   that introduces better permission names and alterable return values. For
+  //   now, this function is mainly called to determine overview access for
+  //   accounts that do NOT have the 'translate any', entity type or bundle
+  //   permission, which would otherwise grant them overview access even if
+  //   they could not do anything on said overview.
+  //   See: \Drupal\content_translation\AccessContentTranslationOverviewAccess.
+  //   Furthermore, this function checks for a number of permissions in
+  //   combination with entity access, which makes it hard to alter the return
+  //   value, whereas full use of the entity access layer (operation checks)
+  //   would make it a walk in the park.
+  //   The old way is represented by $has_any_permissions and the new way by
+  //   $has_access. The goal is to shift to a more alterable access layer
+  //   entirely, it being the entity access layer at the time of writing.
   $account = \Drupal::currentUser();
-  $condition = $entity instanceof ContentEntityInterface && $entity->access('view') &&
-    !$entity->getUntranslated()->language()->isLocked() && \Drupal::languageManager()->isMultilingual() && $entity->isTranslatable() &&
-    ($account->hasPermission('create content translations') || $account->hasPermission('update content translations') || $account->hasPermission('delete content translations') ||
-    ($account->hasPermission('translate editable entities') && $entity->access('update')));
+  $has_any_permission = $account->hasPermission('create content translations')
+    || $account->hasPermission('update content translations')
+    || $account->hasPermission('delete content translations')
+    || ($account->hasPermission('translate editable entities') && $entity->access('update'));
+
+  $has_access = $entity->access('create translation') || $entity->access('update translation') || $entity->access('delete translation');
+
+  $condition = $entity_can_be_viewed && $entity_is_translatable && ($has_any_permission || $has_access);
   return AccessResult::allowedIf($condition)->cachePerPermissions()->addCacheableDependency($entity);
 }
 
+/**
+ * Implements hook_entity_access().
+ */
+function content_translation_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
+  $operation_to_permission_map = [
+    'create translation' => 'create content translations',
+    'update translation' => 'update content translations',
+    'delete translation' => 'delete content translations',
+  ];
+
+  if (!in_array($operation, array_keys($operation_to_permission_map), TRUE)) {
+    return AccessResult::neutral();
+  }
+
+  $entity_type = $entity->getEntityType();
+  $entity_type_id = $entity->getEntityTypeId();
+
+  $has_entity_type_access = $account->hasPermission('translate any entity');
+  if (!$has_entity_type_access) {
+    $entity_type_access_permission = $entity_type->getPermissionGranularity() === 'bundle'
+      ? "translate {$entity->bundle()} $entity_type_id"
+      : "translate $entity_type_id";
+    $has_entity_type_access = $account->hasPermission($entity_type_access_permission);
+  }
+
+  $access = AccessResult::allowedIf($has_entity_type_access && $account->hasPermission($operation_to_permission_map[$operation]))->cachePerPermissions();
+  if (!$access->isAllowed()) {
+    $update_access = $entity->access('update', $account, TRUE);
+
+    // Check for allowed update access. If not, we risk returning Forbidden
+    // rather than Neutral simply because our fallback checking for update
+    // access resulted in a Forbidden (to update) result.
+    if ($update_access->isAllowed()) {
+      $access = AccessResult::allowedIfHasPermission($account, 'translate editable entities');
+    }
+
+    $access->addCacheableDependency($update_access);
+  }
+
+  return $access;
+}
+
 /**
  * Implements hook_form_alter().
  */
diff --git a/core/modules/content_translation/src/Access/ContentTranslationOverviewAccess.php b/core/modules/content_translation/src/Access/ContentTranslationOverviewAccess.php
index 2d5d65eb79dce240a4a6b90da1be3316a6c5bfb2..926fd730512e5c2689ea8bf39188ee539c176c52 100644
--- a/core/modules/content_translation/src/Access/ContentTranslationOverviewAccess.php
+++ b/core/modules/content_translation/src/Access/ContentTranslationOverviewAccess.php
@@ -18,7 +18,7 @@ class ContentTranslationOverviewAccess implements AccessInterface {
    *
    * @var \Drupal\Core\Entity\EntityTypeManagerInterface
    */
-  protected $entityTypeManager;
+  protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * Constructs a ContentTranslationOverviewAccess object.
@@ -47,29 +47,28 @@ public function access(RouteMatchInterface $route_match, AccountInterface $accou
     /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
     $entity = $route_match->getParameter($entity_type_id);
     if ($entity && $entity->isTranslatable()) {
-      // Get entity base info.
-      $bundle = $entity->bundle();
+      // @todo Remove when this module's access layer receives a proper overhaul
+      //   that introduces better permission names and alterable return values.
+      //   For now the idea is that you only need to have the 'translate any',
+      //   entity type or bundle permission to access the overview, even if you
+      //   can't do anything there. A better solution would be to introduce an
+      //   'access translation overview' permission.
+      if ($account->hasPermission('translate any entity')) {
+        return AccessResult::allowed()->cachePerPermissions();
+      }
+      $entity_type_access_permission = $entity->getEntityType()->getPermissionGranularity() == 'bundle'
+        ? "translate {$entity->bundle()} $entity_type_id"
+        : "translate $entity_type_id";
+      if ($account->hasPermission($entity_type_access_permission)) {
+        return AccessResult::allowed()->cachePerPermissions();
+      }
 
       // Get entity access callback.
       $definition = $this->entityTypeManager->getDefinition($entity_type_id);
       $translation = $definition->get('translation');
       $access_callback = $translation['content_translation']['access_callback'];
-      $access = call_user_func($access_callback, $entity);
-      if ($access->isAllowed()) {
-        return $access;
-      }
 
-      // Check "translate any entity" permission.
-      if ($account->hasPermission('translate any entity')) {
-        return AccessResult::allowed()->cachePerPermissions()->inheritCacheability($access);
-      }
-
-      // Check per entity permission.
-      $permission = "translate {$entity_type_id}";
-      if ($definition->getPermissionGranularity() == 'bundle') {
-        $permission = "translate {$bundle} {$entity_type_id}";
-      }
-      return AccessResult::allowedIfHasPermission($account, $permission)->inheritCacheability($access);
+      return call_user_func($access_callback, $entity);
     }
 
     // No opinion.
diff --git a/core/modules/content_translation/src/ContentTranslationHandler.php b/core/modules/content_translation/src/ContentTranslationHandler.php
index a4894b99f1ad6b43f37a5557c8edeaf59e4b8ece..ee2854b600576294078d9d13a104007750e48df3 100644
--- a/core/modules/content_translation/src/ContentTranslationHandler.php
+++ b/core/modules/content_translation/src/ContentTranslationHandler.php
@@ -3,7 +3,6 @@
 namespace Drupal\content_translation;
 
 use Drupal\Component\Datetime\TimeInterface;
-use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -43,7 +42,7 @@ class ContentTranslationHandler implements ContentTranslationHandlerInterface, E
    *
    * @var string
    */
-  protected $entityTypeId;
+  protected string $entityTypeId;
 
   /**
    * Information about the entity type.
@@ -87,7 +86,7 @@ class ContentTranslationHandler implements ContentTranslationHandlerInterface, E
    *
    * @var \Drupal\Core\Field\FieldStorageDefinitionInterface[]
    */
-  protected $fieldStorageDefinitions;
+  protected array $fieldStorageDefinitions;
 
   /**
    * The messenger service.
@@ -313,20 +312,7 @@ public function retranslate(EntityInterface $entity, $langcode = NULL) {
    * {@inheritdoc}
    */
   public function getTranslationAccess(EntityInterface $entity, $op) {
-    // @todo Move this logic into a translation access control handler checking also
-    //   the translation language and the given account.
-    $entity_type = $entity->getEntityType();
-    $translate_permission = TRUE;
-    // If no permission granularity is defined this entity type does not need an
-    // explicit translate permission.
-    if (!$this->currentUser->hasPermission('translate any entity') && $permission_granularity = $entity_type->getPermissionGranularity()) {
-      $translate_permission = $this->currentUser->hasPermission($permission_granularity == 'bundle' ? "translate {$entity->bundle()} {$entity->getEntityTypeId()}" : "translate {$entity->getEntityTypeId()}");
-    }
-    $access = AccessResult::allowedIf(($translate_permission && $this->currentUser->hasPermission("$op content translations")))->cachePerPermissions();
-    if (!$access->isAllowed()) {
-      return AccessResult::allowedIfHasPermission($this->currentUser, 'translate editable entities')->andIf($entity->access('update', $this->currentUser, TRUE));
-    }
-    return $access;
+    return $entity->access("$op translation", $this->currentUser, TRUE);
   }
 
   /**
@@ -366,8 +352,12 @@ public function entityFormAlter(array &$form, FormStateInterface $form_state, En
       $title = $this->entityFormTitle($entity);
       // When editing the original values display just the entity label.
       if ($is_translation) {
-        $t_args = ['%language' => $languages[$form_langcode]->getName(), '%title' => $entity->label(), '@title' => $title];
-        $title = $new_translation ? t('Create %language translation of %title', $t_args) : t('@title [%language translation]', $t_args);
+        $t_args = [
+          '%language' => $languages[$form_langcode]->getName(),
+          '%title' => $entity->label(),
+          '@title' => $title,
+        ];
+        $title = $new_translation ? $this->t('Create %language translation of %title', $t_args) : $this->t('@title [%language translation]', $t_args);
       }
       $form['#title'] = $title;
     }
@@ -679,8 +669,25 @@ protected function addTranslatabilityClue(&$element) {
 
     // Elements which can have a #title attribute according to FAPI Reference.
     if (!isset($suffix)) {
-      $suffix = ' <span class="translation-entity-all-languages">(' . t('all languages') . ')</span>';
-      $fapi_title_elements = array_flip(['checkbox', 'checkboxes', 'date', 'details', 'fieldset', 'file', 'item', 'password', 'password_confirm', 'radio', 'radios', 'select', 'text_format', 'textarea', 'textfield', 'weight']);
+      $suffix = ' <span class="translation-entity-all-languages">(' . $this->t('all languages') . ')</span>';
+      $fapi_title_elements = array_flip([
+        'checkbox',
+        'checkboxes',
+        'date',
+        'details',
+        'fieldset',
+        'file',
+        'item',
+        'password',
+        'password_confirm',
+        'radio',
+        'radios',
+        'select',
+        'text_format',
+        'textarea',
+        'textfield',
+        'weight',
+      ]);
     }
 
     // Update #title attribute for all elements that are allowed to have a
diff --git a/core/modules/content_translation/tests/modules/content_translation_test/content_translation_test.module b/core/modules/content_translation/tests/modules/content_translation_test/content_translation_test.module
index 99d14eb19f5de205dbe2bf1c27a1dcd8b5bb878a..976a68cfcc7154fa79e8fde6352a3d328eb142ff 100644
--- a/core/modules/content_translation/tests/modules/content_translation_test/content_translation_test.module
+++ b/core/modules/content_translation/tests/modules/content_translation_test/content_translation_test.module
@@ -31,11 +31,14 @@ function content_translation_test_entity_bundle_info_alter(&$bundles) {
  */
 function content_translation_test_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
   $access = \Drupal::state()->get('content_translation.entity_access.' . $entity->getEntityTypeId());
-  if (!empty($access[$operation])) {
+  if (!isset($access[$operation])) {
+    return AccessResult::neutral();
+  }
+  elseif (!empty($access[$operation])) {
     return AccessResult::allowed();
   }
   else {
-    return AccessResult::neutral();
+    return AccessResult::forbidden();
   }
 }
 
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationOperationsTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationOperationsTest.php
index 3a521b8fe6a9abe5a5127203cdf2abc2bca749b0..6f67cf5efef4e2ed62390cfebb9213005215fe7f 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationOperationsTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationOperationsTest.php
@@ -44,17 +44,27 @@ class ContentTranslationOperationsTest extends NodeTestBase {
   protected static $modules = [
     'language',
     'content_translation',
+    'content_translation_test',
     'node',
     'views',
     'block',
   ];
 
+  /**
+   * The state service.
+   *
+   * @var \Drupal\Core\State\StateInterface
+   */
+  protected $state;
+
   /**
    * {@inheritdoc}
    */
   protected function setUp(): void {
     parent::setUp();
 
+    $this->state = $this->container->get('state');
+
     // Enable additional languages.
     $langcodes = ['es', 'ast'];
     foreach ($langcodes as $langcode) {
@@ -138,6 +148,73 @@ public function testOperationTranslateLink(): void {
     $this->assertSession()->linkByHrefNotExists('node/' . $node->id() . '/translations');
   }
 
+  /**
+   * Tests that operation access can be altered using hook_entity_access().
+   */
+  public function testOperationTranslateLinkWithEntityAccessHook() {
+    $node = $this->drupalCreateNode(['type' => 'article', 'langcode' => 'es']);
+    // Verify no translation operation links are displayed for users without
+    // permission.
+    $this->drupalLogin($this->baseUser1);
+    $this->drupalGet('admin/content');
+    $this->assertSession()->linkByHrefNotExists('node/' . $node->id() . '/translations');
+    \Drupal::entityTypeManager()->getStorage('view')->load('content')->invalidateCaches();
+
+    // Verify that access can be given using the entity access hook.
+    $this->state->set('content_translation.entity_access.node', [
+      'create translation' => TRUE,
+      'update translation' => TRUE,
+      'delete translation' => TRUE,
+    ]);
+    $this->drupalGet('admin/content');
+    $this->assertSession()->linkByHrefExists('node/' . $node->id() . '/translations');
+
+    // Ensure that an unintended misconfiguration of permissions does not open
+    // access to the translation form, see https://www.drupal.org/node/2558905.
+    $this->drupalLogout();
+    user_role_change_permissions(
+      Role::AUTHENTICATED_ID,
+      [
+        'create content translations' => TRUE,
+        'access content' => FALSE,
+      ]
+    );
+    $this->drupalLogin($this->baseUser1);
+    $this->drupalGet($node->toUrl('drupal:content-translation-overview'));
+    $this->assertSession()->statusCodeEquals(403);
+
+    // Ensure that the translation overview is also not accessible when the user
+    // has 'access content', but the node is not published.
+    user_role_change_permissions(
+      Role::AUTHENTICATED_ID,
+      [
+        'create content translations' => TRUE,
+        'access content' => TRUE,
+      ]
+    );
+    $node->setUnpublished()->save();
+    $this->drupalGet($node->toUrl('drupal:content-translation-overview'));
+    $this->assertSession()->statusCodeEquals(403);
+
+    // Ensure the 'Translate' local task does not show up anymore when disabling
+    // translations for a content type.
+    $node->setPublished()->save();
+    user_role_change_permissions(
+      Role::AUTHENTICATED_ID,
+      [
+        'administer content translation' => TRUE,
+        'administer languages' => TRUE,
+      ]
+    );
+    $this->drupalPlaceBlock('local_tasks_block');
+    $this->drupalGet('node/' . $node->id());
+    $this->assertSession()->linkByHrefExists('node/' . $node->id() . '/translations');
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm(['settings[node][article][translatable]' => FALSE], 'Save configuration');
+    $this->drupalGet('node/' . $node->id());
+    $this->assertSession()->linkByHrefNotExists('node/' . $node->id() . '/translations');
+  }
+
   /**
    * Tests the access to the overview page for translations.
    *
@@ -170,4 +247,45 @@ public function testContentTranslationOverviewAccess(): void {
     $access_control_handler->resetCache();
   }
 
+  /**
+   * Tests that overview access can be altered using hook_entity_access().
+   *
+   * @see content_translation_translate_access()
+   * @see content_translation_entity_access()
+   */
+  public function testContentTranslationOverviewAccessWithEntityAccessHook() {
+    $access_control_handler = \Drupal::entityTypeManager()->getAccessControlHandler('node');
+    $user = $this->createUser(['access content']);
+    $this->drupalLogin($user);
+
+    // User cannot access translations out of the box, but with an entity access
+    // hook changing the access to Allowed, they do.
+    $this->state->set('content_translation.entity_access.node', [
+      'create translation' => TRUE,
+      'update translation' => TRUE,
+      'delete translation' => TRUE,
+    ]);
+
+    $node = $this->drupalCreateNode(['status' => FALSE, 'type' => 'article']);
+    $this->assertFalse(content_translation_translate_access($node)->isAllowed());
+    $access_control_handler->resetCache();
+
+    $node->setPublished();
+    $node->save();
+    $this->assertTrue(content_translation_translate_access($node)->isAllowed());
+    $access_control_handler->resetCache();
+
+    user_role_change_permissions(
+      Role::AUTHENTICATED_ID,
+      [
+        'access content' => FALSE,
+      ]
+    );
+
+    $user = $this->createUser([]);
+    $this->drupalLogin($user);
+    $this->assertFalse(content_translation_translate_access($node)->isAllowed());
+    $access_control_handler->resetCache();
+  }
+
 }
